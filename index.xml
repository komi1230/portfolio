<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Launch Today</title><link>http://komi.dev/</link><description>Recent content on Launch Today</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 29 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://komi.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Small Tips in Emacs</title><link>http://komi.dev/post/2020-09-29-tips-emacs/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-29-tips-emacs/</guid><description>Fullscreen as default In writing code, I like wide screen, fullscreen is the best.
This setting makes Emacs start with fullscreen.
(toggle-frame-fullscreen) Vertical Split My Emacs&amp;rsquo; screen is split vertically, and the left is editor and the right is Terminal (eshell).
When splitting, the screen will be split horizontally as default. So if Emacs finds this setting in loading init.el file, Emacs will split vertically.
(split-window-right) My screen is like this.</description></item><item><title>Install Tinysearch in Hugo</title><link>http://komi.dev/post/2020-09-23-introduction-tinysearch/</link><pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-23-introduction-tinysearch/</guid><description>About Tinysearch Tinysearch is a full-text search engine for static websites built with Rust and Wasm. This is very useful and easy to use in our static site like this blog. And also blazingly fast. This is because tinysearch works with WebAssembly and runs much faster than JavaScript.
In searching, tinysearch loads JSON file (like this, this blog&amp;rsquo;s article information) for search target, browse with search query and output the results which are matched.</description></item><item><title>How to get data from Textfield of Material-UI</title><link>http://komi.dev/post/2020-09-16-material-ui-textfield-var/</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-16-material-ui-textfield-var/</guid><description>Process input data in front end Material-UI is reallly convenient package for non-designer because programmer can easily make awesome design. And Material-UI has a variety of components, which are easy-to-custommize.
To get data from user&amp;rsquo;s input, in normal HTML, we use &amp;lt;input&amp;gt; tag. But we have to store data into some variable to process data with JavaScript.
In practice You can easily make simple page with Textfield.
import React from &amp;#39;react&amp;#39;; import TextField from &amp;#39;@material-ui/core/TextField&amp;#39;; export default function OurForm() { return ( &amp;lt;TextField label=&amp;#34;Label&amp;#34; /&amp;gt; ); } And UI is like this.</description></item><item><title>const and static in Rust</title><link>http://komi.dev/post/2020-09-12-when-to-use-lazy_static/</link><pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-12-when-to-use-lazy_static/</guid><description>Global variable in Rust In functional programming, the way to use global variable properly is just to avoid using it. This is not a joke. Modern software engineering requires variables to be scoped, and at the same time, they shouldn&amp;rsquo;t be changed even in scopes such as closures.
However, we can&amp;rsquo;t sometimes avoid using global variable (Somtimes codes can be cleaner.) For such situations, Rust provides some syntax to controll global variables.</description></item><item><title>Modernize Emacs</title><link>http://komi.dev/post/2020-09-07-modernize-emacs/</link><pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-07-modernize-emacs/</guid><description>Do you know Emacs? Today there are many editors. The most popular one seems Visual Stadio Code. Nobody can complain about this fact. And the second one may be Vim. Nobody can also complain about this.
But&amp;hellip;Well&amp;hellip; By the say, do you know Emacs?
Emacs is a kind of editors and has so long history. Today, a few people use this. I&amp;rsquo;m not sure why Emacs is not popular because I think this is really customizable and light-weighted.</description></item><item><title>Tools and Ecosystem of WebAssembly with Rust</title><link>http://komi.dev/post/2020-09-06-ecosystems-of-wasm/</link><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-06-ecosystems-of-wasm/</guid><description>About WebAssembly First of all, you have to understand what WebAssembly is.
Mozilla says &amp;hellip;
WebAssembly is a new type of code that can be run in modern web browsers â€” it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++, C# and Rust with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together.</description></item><item><title>Hello My New Blog</title><link>http://komi.dev/post/2020-09-05-make-blog/</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-05-make-blog/</guid><description>About me Hello, my name is Yusuke Kominami. I&amp;rsquo;m living in Japan, and working as a machine learning engineer. I&amp;rsquo;m 23 years old and graguated from Kyoto University in this March. When I was student, I majored in Bioinformatics. Why am I a software engineer? Actually, I&amp;rsquo;m not interested in Biology, more interested in computing. So when I was in university, I just stuck on programming. For more about me,</description></item><item><title/><link>http://komi.dev/search/placeholder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://komi.dev/search/placeholder/</guid><description/></item><item><title/><link>http://komi.dev/top/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://komi.dev/top/about/</guid><description>About Introduction My name is Yusuke Kominami.
I&amp;rsquo;m 23 years old and living in Tokyo. And I work as machine learning engineer and also as technical adviser.
I graduated from the faculty of Science in Kyoto University, majored Biology at Takada Lab.
About software engineering, I love Rust. It is a perfect programming language, I think. My expertise ranges from HTML/CSS/JavaScript to Low-level programming. Furthermore, I have solid knowledge on machine learning and data science based on mathematics.</description></item></channel></rss>