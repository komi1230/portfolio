<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Launch Today</title><link>http://komi.dev/tags/rust/</link><description>Recent content in Rust on Launch Today</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://komi.dev/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>const and static in Rust</title><link>http://komi.dev/post/2020-09-12-when-to-use-lazy_static/</link><pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-12-when-to-use-lazy_static/</guid><description>Global variable in Rust In functional programming, the way to use global variable properly is just to avoid using it. This is not a joke. Modern software engineering requires variables to be scoped, and at the same time, they shouldn&amp;rsquo;t be changed even in scopes such as closures.
However, we can&amp;rsquo;t sometimes avoid using global variable (Somtimes codes can be cleaner.) For such situations, Rust provides some syntax to controll global variables.</description></item><item><title>Tools and Ecosystem of WebAssembly with Rust</title><link>http://komi.dev/post/2020-09-06-ecosystems-of-wasm/</link><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid>http://komi.dev/post/2020-09-06-ecosystems-of-wasm/</guid><description>About WebAssembly First of all, you have to understand what WebAssembly is.
Mozilla says &amp;hellip;
WebAssembly is a new type of code that can be run in modern web browsers â€” it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++, C# and Rust with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together.</description></item></channel></rss>